// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ui-elements-basic Components ComplexTextInput should render as a password input with all the optional properties 1`] = `
.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  box-sizing: border-box;
  width: 100%;
  height: 35px;
  box-shadow: 0 1px 3px 0 rgba(0,0,0,0.23);
  background-color: #foreground;
  color: #text;
  border-bottom: 2px solid transparent;
  position: relative;
  cursor: text;
}

.c0.hasFocus {
  border-bottom: 2px solid #active;
}

.c0 svg,
.c0 i {
  box-sizing: border-box;
  height: 100%;
  margin: 0 10px;
}

.c0 input {
  font-size: inherit;
  border: none;
  width: 100%;
  height: 100%;
  margin: 0;
  padding: 10px;
  box-sizing: border-box;
  background-color: transparent;
  color: inherit;
}

.c0 input:focus {
  outline: transparent;
}

.c0 * {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  margin: 0;
}

.c0 input + i {
  font-size: 1em;
  -webkit-transition: all .3s ease;
  transition: all .3s ease;
  color: #text_inverted;
  cursor: pointer;
}

.c0 input:placeholder-shown + i {
  opacity: 0;
  -webkit-transform: rotate(90deg);
  -ms-transform: rotate(90deg);
  transform: rotate(90deg);
}

.c0 input + i:hover {
  color: #text;
}

@media screen and (min-width:414px) {
  .c0 input::-webkit-input-placeholder {
    font-size: .875em;
  }

  .c0 input::-moz-placeholder {
    font-size: .875em;
  }

  .c0 input:-ms-input-placeholder {
    font-size: .875em;
  }

  .c0 input::-webkit-input-placeholder {
    font-size: .875em;
  }

  .c0 input::-moz-placeholder {
    font-size: .875em;
  }

  .c0 input:-ms-input-placeholder {
    font-size: .875em;
  }

  .c0 input::placeholder {
    font-size: .875em;
  }
}

<div
  className="TextInput c0"
  onClick={[Function]}
>
  <button />
  <input
    onBlur={[Function]}
    onFocus={[Function]}
    placeholder="test placeholder"
    type="password"
    value="test"
  />
  <button />
</div>
`;

exports[`ui-elements-basic Components ComplexTextInput should render as a text input with all the optional properties 1`] = `
.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  box-sizing: border-box;
  width: 100%;
  height: 35px;
  box-shadow: 0 1px 3px 0 rgba(0,0,0,0.23);
  background-color: #foreground;
  color: #text;
  border-bottom: 2px solid transparent;
  position: relative;
  cursor: text;
}

.c0.hasFocus {
  border-bottom: 2px solid #active;
}

.c0 svg,
.c0 i {
  box-sizing: border-box;
  height: 100%;
  margin: 0 10px;
}

.c0 input {
  font-size: inherit;
  border: none;
  width: 100%;
  height: 100%;
  margin: 0;
  padding: 10px;
  box-sizing: border-box;
  background-color: transparent;
  color: inherit;
}

.c0 input:focus {
  outline: transparent;
}

.c0 * {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  margin: 0;
}

.c0 input + i {
  font-size: 1em;
  -webkit-transition: all .3s ease;
  transition: all .3s ease;
  color: #text_inverted;
  cursor: pointer;
}

.c0 input:placeholder-shown + i {
  opacity: 0;
  -webkit-transform: rotate(90deg);
  -ms-transform: rotate(90deg);
  transform: rotate(90deg);
}

.c0 input + i:hover {
  color: #text;
}

@media screen and (min-width:414px) {
  .c0 input::-webkit-input-placeholder {
    font-size: .875em;
  }

  .c0 input::-moz-placeholder {
    font-size: .875em;
  }

  .c0 input:-ms-input-placeholder {
    font-size: .875em;
  }

  .c0 input::-webkit-input-placeholder {
    font-size: .875em;
  }

  .c0 input::-moz-placeholder {
    font-size: .875em;
  }

  .c0 input:-ms-input-placeholder {
    font-size: .875em;
  }

  .c0 input::placeholder {
    font-size: .875em;
  }
}

<div
  className="TextInput c0"
  onClick={[Function]}
>
  <button />
  <input
    onBlur={[Function]}
    onFocus={[Function]}
    placeholder="test placeholder"
    type="text"
    value="test"
  />
  <button />
</div>
`;

exports[`ui-elements-basic Components ComplexTextInput should render with default state 1`] = `
.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  box-sizing: border-box;
  width: 100%;
  height: 35px;
  box-shadow: 0 1px 3px 0 rgba(0,0,0,0.23);
  background-color: #foreground;
  color: #text;
  border-bottom: 2px solid transparent;
  position: relative;
  cursor: text;
}

.c0.hasFocus {
  border-bottom: 2px solid #active;
}

.c0 svg,
.c0 i {
  box-sizing: border-box;
  height: 100%;
  margin: 0 10px;
}

.c0 input {
  font-size: inherit;
  border: none;
  width: 100%;
  height: 100%;
  margin: 0;
  padding: 10px;
  box-sizing: border-box;
  background-color: transparent;
  color: inherit;
}

.c0 input:focus {
  outline: transparent;
}

.c0 * {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  margin: 0;
}

.c0 input + i {
  font-size: 1em;
  -webkit-transition: all .3s ease;
  transition: all .3s ease;
  color: #text_inverted;
  cursor: pointer;
}

.c0 input:placeholder-shown + i {
  opacity: 0;
  -webkit-transform: rotate(90deg);
  -ms-transform: rotate(90deg);
  transform: rotate(90deg);
}

.c0 input + i:hover {
  color: #text;
}

@media screen and (min-width:414px) {
  .c0 input::-webkit-input-placeholder {
    font-size: .875em;
  }

  .c0 input::-moz-placeholder {
    font-size: .875em;
  }

  .c0 input:-ms-input-placeholder {
    font-size: .875em;
  }

  .c0 input::-webkit-input-placeholder {
    font-size: .875em;
  }

  .c0 input::-moz-placeholder {
    font-size: .875em;
  }

  .c0 input:-ms-input-placeholder {
    font-size: .875em;
  }

  .c0 input::placeholder {
    font-size: .875em;
  }
}

<div
  className="TextInput c0"
  onClick={[Function]}
>
  <input
    onBlur={[Function]}
    onFocus={[Function]}
    type="text"
  />
</div>
`;
